/* autogenerated by Processing revision 1297 on 2025-03-27 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Arrays;
import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SortingVisualizer_interactive_v099_3 extends PApplet {

//import processing.javafx.*;   // javaFX "FX2D" renderer. //<>//
//import java.util.LinkedList;  // Also for Array Queues
      // Array Utilities.



//* Static global Variables */


// Counters *********
static int swaps = 0;  // put 'swaps++' in sort algorithms when array elements get exchanged.
static int aas = 0;    // put 'aas++' in sort algos at points where there are Array Accesses.
static int comps = 0;  // put in 'comps++' where elements are compared < or > or = or 1.
static int snaps = 0;  // more diagnostic.  uses 'snaps++' instead of snap() to estimate drawing steps.
static int lines = 0;  // place a ++ in code whereever lines are drawn.  If a triangle, 'lines+=3'.
static int refresh = 0; // place in code after a background() call.  Counts screen clears.

static String ptrMode = "W";   // currently 'T'RIANGLE(new) and 'W'EDGE(OG default)

static int maxArray = 1000; // We're gonna try to use one large array, and only sort/draw some of it.

static int MIN_MERGE = 32; //  From TimSort.

static int base = 10; // For Radix Sorts.

static boolean runOK = false;
static boolean running = false;

static String sortName = "";

// colourMode
// 0 = white
// 1 = spectrum

static int colourMode = 1;  // not used
static float hueRange = 0;  // not used

static char displayMode = '0';
static char pointerMode = '7';
static boolean soundMode = true;
static boolean showMenu = true;

// Benchmarking
//static int msTimerStart = 0;  // inits the millisecond timer start variable.
//static int msTimerStop = 0;   // inits the millisecond time stop variable.

// static arrays for benchmarking and troubleshooting.
// they're a pain to make, and these are made, so here they are in case they're needed.
//int[] data700 = {};
//int[] data500 = {164, 379, 477, 438, 252, 289, 389, 106, 48, 147, 120, 230, 457, 80, 194, 10, 459, 27, 217, 260, 96, 474, 139, 292, 290, 69, 68, 37, 301, 204, 9, 122, 172, 8, 410, 170, 151, 330, 409, 213, 472, 442, 91, 169, 429, 89, 396, 31, 436, 458, 366, 350, 208, 349, 115, 88, 371, 150, 312, 131, 470, 144, 223, 498, 481, 171, 149, 426, 421, 212, 23, 152, 13, 163, 121, 394, 340, 195, 216, 243, 344, 463, 378, 70, 5, 187, 259, 258, 16, 355, 84, 57, 372, 240, 175, 162, 36, 179, 380, 198, 263, 74, 264, 296, 26, 407, 351, 480, 272, 248, 238, 211, 246, 388, 102, 58, 129, 202, 219, 278, 452, 280, 476, 60, 309, 313, 67, 236, 205, 469, 363, 358, 98, 300, 341, 352, 85, 206, 141, 337, 183, 400, 6, 77, 14, 434, 247, 4, 275, 156, 354, 2, 45, 287, 186, 304, 382, 132, 245, 143, 39, 443, 180, 130, 490, 54, 361, 479, 28, 182, 285, 284, 73, 158, 65, 348, 390, 189, 428, 454, 110, 237, 331, 191, 346, 140, 464, 61, 283, 433, 177, 1, 276, 486, 499, 269, 224, 242, 306, 444, 87, 154, 166, 34, 449, 274, 368, 279, 261, 450, 22, 196, 52, 329, 383, 146, 295, 193, 302, 21, 405, 398, 365, 44, 455, 356, 53, 333, 320, 323, 374, 353, 188, 461, 125, 310, 266, 160, 62, 317, 81, 103, 83, 391, 345, 403, 249, 362, 250, 402, 221, 108, 445, 255, 298, 492, 185, 244, 101, 123, 286, 373, 475, 220, 181, 327, 41, 199, 386, 218, 135, 47, 307, 288, 318, 148, 468, 406, 165, 114, 178, 119, 86, 153, 63, 419, 496, 299, 456, 397, 399, 488, 384, 76, 225, 112, 190, 200, 448, 364, 315, 79, 256, 231, 210, 338, 305, 321, 40, 297, 360, 393, 55, 7, 332, 42, 24, 117, 466, 376, 262, 116, 109, 128, 124, 235, 413, 29, 412, 440, 369, 184, 395, 92, 126, 427, 375, 359, 11, 473, 229, 294, 209, 416, 197, 387, 94, 104, 173, 207, 483, 430, 134, 50, 49, 381, 441, 314, 432, 59, 324, 35, 145, 233, 82, 20, 113, 291, 485, 319, 489, 133, 127, 97, 418, 33, 56, 241, 90, 17, 239, 334, 467, 335, 495, 439, 453, 99, 46, 311, 336, 422, 265, 176, 157, 322, 234, 268, 367, 482, 414, 271, 446, 424, 12, 43, 232, 257, 18, 107, 401, 78, 411, 168, 451, 435, 32, 342, 167, 277, 385, 64, 111, 447, 66, 75, 30, 491, 357, 15, 423, 494, 71, 308, 214, 404, 51, 471, 460, 93, 370, 226, 316, 267, 497, 155, 203, 487, 138, 437, 281, 478, 273, 493, 484, 3, 254, 19, 161, 392, 174, 72, 95, 227, 325, 377, 137, 201, 415, 253, 465, 408, 228, 118, 343, 25, 192, 251, 222, 105, 431, 347, 326, 339, 136, 425, 282, 100, 270, 142, 38, 293, 0, 303, 328, 159, 215, 462, 420, 417};
//int[] data250 = {326, 358, 212, 308, 194, 74, 210, 302, 102, 498, 18, 124, 476, 204, 306, 86, 312, 472, 446, 266, 152, 246, 4, 144, 176, 170, 30, 116, 106, 218, 334, 340, 296, 232, 120, 328, 452, 280, 430, 12, 316, 314, 250, 100, 244, 486, 292, 40, 274, 496, 240, 350, 372, 36, 490, 238, 66, 478, 388, 360, 190, 54, 336, 90, 230, 346, 168, 352, 356, 148, 134, 278, 150, 166, 282, 104, 438, 108, 468, 330, 298, 180, 160, 482, 300, 418, 322, 76, 136, 58, 56, 70, 222, 454, 488, 474, 394, 402, 26, 128, 130, 28, 226, 96, 82, 202, 406, 294, 348, 0, 126, 400, 390, 258, 224, 434, 318, 216, 392, 380, 178, 122, 416, 208, 60, 342, 138, 344, 80, 436, 444, 286, 414, 146, 206, 440, 92, 424, 426, 448, 42, 242, 458, 88, 62, 198, 172, 422, 182, 462, 320, 268, 304, 184, 156, 234, 248, 412, 24, 480, 188, 492, 366, 158, 262, 386, 50, 270, 442, 16, 140, 174, 44, 164, 214, 290, 68, 354, 220, 276, 338, 132, 378, 2, 200, 324, 404, 264, 114, 456, 420, 428, 8, 34, 470, 38, 6, 364, 374, 284, 98, 288, 52, 260, 162, 142, 332, 310, 22, 410, 84, 464, 396, 32, 10, 236, 64, 272, 228, 398, 466, 186, 370, 484, 72, 20, 494, 252, 254, 154, 118, 192, 384, 112, 46, 368, 196, 408, 94, 432, 362, 110, 460, 256, 450, 48, 382, 78, 14, 376};
//int[] data100 = {35, 0, 165, 5, 225, 460, 135, 440, 80, 130, 220, 430, 185, 485, 470, 255, 275, 175, 25, 300, 380, 150, 240, 455, 360, 350, 145, 210, 290, 190, 30, 85, 200, 20, 370, 195, 230, 205, 355, 435, 245, 45, 330, 235, 305, 280, 475, 120, 40, 270, 450, 55, 215, 110, 320, 50, 325, 180, 105, 420, 160, 340, 295, 415, 425, 125, 490, 70, 315, 155, 390, 170, 335, 65, 465, 410, 95, 480, 310, 265, 405, 100, 10, 495, 375, 365, 345, 260, 60, 250, 15, 285, 140, 400, 385, 445, 115, 395, 90, 75};
//int[] data50 = {160, 100, 310, 20, 150, 170, 200, 260, 330, 480, 230, 270, 350, 190, 470, 300, 360, 180, 40, 90, 290, 80, 60, 450, 370, 280, 390, 320, 140, 30, 120, 380, 50, 210, 130, 240, 220, 0, 490, 400, 420, 340, 410, 440, 460, 250, 430, 10, 110, 70};
//int[] data10 = {50, 150, 400, 200, 300, 100, 250, 500, 350, 450};



// draw() variables.
static int iter = 0;                 // iteration variable for draw() loop.  frameCount doesn't work with my code.

static boolean drawArrayDone = false;  // used to do post-sort animation.
static int iter2 = 0;         // Iteration variable for post array animation.

/* aQueue is a queue of arrays with linked lists.  aQueue is used for the main
 sort array sequences, and populated with the snap() method as often as
 necessary for an interesting animation.
 aQueue is passed the large sort arrays of variable element length with the
 snap() method.  The array should be added to the queue with the .clone() method
 weirdness happens.  The snap() method should be the only method to add to the queue. */


//static  Queue<int[]> aQueue = new LinkedList<>();



//  Should an Array List need to be used, say if access to already drawn array values are needed
//  this is the syntax for defining it:

//      static  ArrayList<int[]> aList = new ArrayList<int[]>();
//  when adding an array to the aList, use the .clone() method or weirdness happens.

/* ptrList is a list of arrays in an ArrayList.  ptrList is used to animate two
 graphical pointers.  It is populated with the snap() method.  Its arrays are
 currently exclusively int[2] in length.  This is not enforced.  The first
 element positions the bottomUp pointer.  The second element places the
 topDown pointer.  It is important that when the queue to aQueue added,
 so too is ptrList, or there will be Trouble.
 It is useful to access past values of the ptr[] array, so it is defined as an ArrayList.
 The snap() method should be the only way to add elements to the ptrList.
 */

static ArrayList<int[]> ptrList = new ArrayList<int[]>();
static ArrayList<int[]> aList = new ArrayList<int[]>();
//static ArrayList<int[]> chgList = new ArrayList<int[]>();


//   COLOUR AND DISPLAY VARIABLES

// The HSB colour format is used because it's easier to select colours than RGB.

int colourOffset = 0;        // where, in the HSB range, does colours start.
float colourFactor = 1.25f;   // HSB range = aSize * colourFactor
// offset of 1.25 will get rid of most magenta,
// by redshifting.

//*****************************************************SOUND STUFF*****************

SqrOsc snd0;       // sets up two Square Oscillators, one for each floating pointer.
SqrOsc snd1;

Reverb reverb0;   // Applies default reverb effect
Reverb reverb1;    // Adding reverb made the best change.

Env env0;        // Applies an ASR envelope
Env env1;        //  The envelope keeps the tones from playing longer than a few frames.  Sounds ok with reverb.


float aT = 1.0f/120;    // Attack Time
float sT = 1.0f/120;    // Sustain Time
float sL = 0.01f;      // Sustain Level
float rT = 1.0f/120;  // Release Time       (changing any of these really did not affect the sound quality at all)

/*  Some sorts' pointers stick to an element or value for an extended time, causing a long, steady tone.
 The sound code stops playing if there are two consecutive notes in a row.  Some sorts, like QuickSort just have
 short runs of the same value, and these sorts sound worse with the quenching.   This lets one turn the
 quenching on or off on a per-sort basis in the Case statements.  Default to true.*/


static boolean samePitchQuench = true;


//ARRAY SIZE DEFINITION -- might be less of a deal now with newer scaling drawing.

// ******************
static int aSize = 0;    //the MAIN array size for several functions.
// *****************

float wd = 1280.0f;   // window width
float ht = 720.0f;   //  window height

float yR = 0.0f;    // global var to represent the y-Ratio for lines.
float xR = 0.0f;    // global var to represent the x-Ratio for lines.

// The settings() method must be used if screen height & width are defined with variables.
// I don't know why.

// here begins the start of having multiple sorts in one sketch.
// wish me luck.


char inputKey = ' ';  // defaults to Display Menu key.




public void settings() {
//  size((int)wd, (int)ht, P2D);
fullScreen(P2D);
  smooth();
  //options for renderer: none, P2D, P3D, (FX2D with JavaFX library imported)
}


//*******************************SETUP**********************
public void setup() {

  wd = width;
  ht = height;
  background(0);


  loop();


  // sets the framerate of the draw() method.

  frameRate(60);


/* This stanza defines the sound effects.  snd0 corresponds to ptr0 sounds.
snd1 corresponds to ptr1 sounds. */

  snd0 = new SqrOsc(this);
  snd1 = new SqrOsc(this);
  env0 = new Env(this);
  env1 = new Env(this);
  reverb0 = new Reverb(this);
  reverb1 = new Reverb(this);

  reverb0.process(snd0);
  reverb1.process(snd1);
  snd0.pan(0.5f);
  snd1.pan(-0.5f);





  showMenu = true;


  // Make Hue range equal to array elements, others to percentages.
  // When lines are drawn, the color can be set to the array value
  // to get a nice spectrum.   The 100s define the SB and Alpha as percentages.

  hueRange = aSize * colourFactor;

  colorMode(HSB, aSize * colourFactor, 10, 10, 10); // changed from 100 to 10; look for magentas; change accordingly.




  // setup is done.
  // DEFAULT STROKECAP (ROUND) = Big performance hit with default renderer.
  // Use SQUARE or PROJECTED instead.

  displayMenuScreen();
  strokeCap(SQUARE);

  // noSmooth();
  yR = ht/(aSize); // Y axis ratio to set line height scale.
  xR = wd/aSize;          // X axis ratio to scale line strokeWeight

  //delay(2000);
  //  msTimerStart = millis();
}

public void draw() {

  // main scale and translate calls have to be at start of draw() because docs say they reset each loop

float scaleFactor = 0.89f;

  scale(scaleFactor, scaleFactor);    // shrinks the drawing within the display screen.
//  translate((((1.0-scaleFactor) * width)/2/scaleFactor), ((1.0-scaleFactor) * height)/2/scaleFactor);  // gives a small border around drawing.
// textSize(((1.0-scaleFactor) * height)/2/scaleFactor)
  translate((((1.0f-scaleFactor) * width)/2/scaleFactor), ((1.0f-scaleFactor) * height)/2/scaleFactor);  // gives a small border around drawing.


  if (showMenu && !running) {
    displayMenuScreen();
  }

  if (iter < aList.size() && runOK) {
    
background(0);  

    if (displayMode == '0') {
      drawSpectrum(aList.get(iter));
    }

    if (displayMode == '1') {
      drawSticks(aList.get(iter));
    }

    if (displayMode == '2') {
      pointerMode = '8';
      drawTriangleSpectrum(aList.get(iter));
    }

    if (displayMode == '3') {
      pointerMode = '#';
      drawBoxedArray(aList.get(iter));
    }

    if (runOK) {
      if (iter < ptrList.size() - 1) {
        if (pointerMode == '7') {
          drawTrails();
        }

        if (pointerMode =='8') {
          ptrArrowDraw();
        }
        if (pointerMode =='9') {
          drawPtrLines();
        }
      }

      if (soundMode) {
        soundPtr();
      }
    }
    if (runOK) {  // keeps from crashing if a pointer mode
      iter++;                 // is selected before a sort mode.
      writeSortName(((1.0f-scaleFactor) * height)/2/scaleFactor);
    }
  } else {
    drawArrayDone = true;


    // noLoop();
  }


 


  // saveFrame("stills/images-#####.tif");
}

public void keyPressed() {
  inputKey = key;
  showMenu = false;


  int[] arr = genArray (maxArray);


  switch(inputKey) {

  case 'a':
    resetPreSortVars();
    aSize = 80;
    shuffleArray(arr);
    bubbleSort(arr);
    samePitchQuench = true; // definitely want quenching here.
    resetPreDrawVarsAndGo();
    break;

  case 'b':
    resetPreSortVars();
    aSize = 100;
    shuffleArray(arr);
    insertionSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'c':
    resetPreSortVars();
    aSize = 80;
    shuffleArray(arr);
    selectionSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'd':
    resetPreSortVars();
    aSize = 100;
    shuffleArray(arr);
    cocktailSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'e':
    resetPreSortVars();
    aSize = 200;
    shuffleArray(arr);
    shellSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'f':
    resetPreSortVars();
    aSize = 500;
    shuffleArray(arr);
    mergeSort(arr, 0, aSize - 1);
    resetPreDrawVarsAndGo();
    break;

  case 'g':
    resetPreSortVars();
    aSize = 500;
    shuffleArray(arr);
    iterativeMergeSort(arr);
    resetPreDrawVarsAndGo();
    break;


  case 'h':
    resetPreSortVars();
    aSize = 400;
    shuffleArray(arr);
    quickSort(arr, 0, aSize - 1);
    samePitchQuench = false;  // The cut-outs sound worse than a tone-run-on.
    resetPreDrawVarsAndGo();
    break;

  case 'i':
    resetPreSortVars();
    aSize = 800;
    shuffleArray(arr);
    dualPivotQuickSort(arr, 0, aSize -1);
    samePitchQuench = false; // Quicksorts hit the same pitch, but not long; cutouts sound worse.
    resetPreDrawVarsAndGo();
    break;

  case 'j':
    resetPreSortVars();
    aSize = 400;
    shuffleArray(arr);
    heapSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'k':
    resetPreSortVars();
    aSize = 160;
    shuffleArray(arr);
    combSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'l':
    resetPreSortVars();
    aSize = 1000;
    base = 10;
    shuffleArray(arr);
    radixSort(arr);   // LSD
    resetPreDrawVarsAndGo();
    break;

  case 'm':
    resetPreSortVars();
    aSize = 800;
    base = 4;
    shuffleArray(arr);
    radixSort(arr);   // LSD
    resetPreDrawVarsAndGo();
    break;

  case 'n':
    resetPreSortVars();
    aSize = 400;
    base = 10;
    shuffleArray(arr);
    radixMSDSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'o':
    resetPreSortVars();
    aSize = 500;
    base = 4;
    shuffleArray(arr);
    radixMSDSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'p':
    resetPreSortVars();
    aSize = 500;
    shuffleArray(arr);
    smoothSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 'q':
    resetPreSortVars();
    aSize = 256;
    shuffleArray(arr);
    // params are Array, start index, array size, and 1 (for up, 0 for down)
    bitonicSort(arr, 0, aSize, 1);   // bi-tonic, like bi-weekly. :)
    resetPreDrawVarsAndGo();
    break;

    case ('r'):
    resetPreSortVars();
    aSize = 300;
    shuffleArray(arr);
    cycleSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 's':
    resetPreSortVars();
    aSize = 200;
    shuffleArray(arr);
    pigeonholeSort(arr);
    resetPreDrawVarsAndGo();
    break;

  case 't':
    resetPreSortVars();
    aSize = 600;
    shuffleArray(arr);
    timSort(arr, aSize);
    resetPreDrawVarsAndGo();
    break;

  case '6':
    soundMode = !soundMode;
    break;

  case ' ':
    showMenu = true;
    running = false;
    break;

  case '0':
    background(0);
    displayMode = '0';
    break;

  case '1':
    displayMode = '1'; // triangle
    background(0);
    break;

  case '2':
    displayMode = '2';  //sticks
    background(0);
    break;

  case '3':
    displayMode = '3';  // boxes
    pointerMode = '4';   //disable pointers for box draw.
    background(0);
    break;


  case '7':
    pointerMode = '7';  // flying lines
    break;

  case '8':
    pointerMode = '8';  // arrows
    break;

  case '9':
    pointerMode = '9'; // regular lines
    break;

  case '5':
    pointerMode = '5'; // no pointers
    break;
  }
  if (!running) {
    showMenu = true;
  }
}
public void displayMenuScreen(){
 
  background(0,0,0,10);

fill(0,0, 100, 100);
strokeWeight(1);
 rectMode(CENTER);
 textAlign(CENTER,CENTER);
 
 float rowTracker = 0;
 float headerX = width/2.0f;
 float headerY = height/30.0f;
 textSize(headerY*2);
 text("(Yet Another) Sorting Visualizer", headerX, headerY, width, headerY*2);
 rowTracker += headerY*2.0f;
 
 // first 10% of screen used
// header 2 smaller
rowTracker += height/40.0f;
headerY = height/40.0f ; // headerX stays to center
textSize(headerY*2);
text("coded novicely in Processing 4.3.4/java", headerX, headerY + rowTracker, width, (headerY*2)); 


//*******************************************************************************************

rowTracker += headerY*2.0f;
rowTracker += height/15.0f;

headerY = height/55.0f;
headerX = width/3.0f;
float header2X = headerX*2.5f;
textAlign(LEFT, CENTER);
textSize(headerY*2);
text("\"A\" for good ol' BubbleSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"K\" for CombSort", header2X, headerY + rowTracker, width/2.5f, headerY*2);


rowTracker += headerY*2.0f;
rowTracker += height/40.0f;
text("\"B\" for InsertionSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"L\" for RadixSort LSD, base 10", header2X, headerY + rowTracker, width/2.5f, headerY*2);

rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"C\" for SelectionSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"M\" for RadixSort LSD, base 4", header2X, headerY + rowTracker, width/2.5f, headerY*2);

rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"D\" for CocktailSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"N\" for RadixSort MSD, base 10", header2X, headerY + rowTracker, width/2.5f, headerY*2);


rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"E\" for ShellSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"O\" for RadixSort MSD, base 4", header2X, headerY + rowTracker, width/2.5f, headerY*2);

rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"F\" for MergeSort (in-place, recursive)", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"P\" for SmoothSort", header2X, headerY + rowTracker, width/2.5f, headerY*2);


rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"G\" for MergeSort (iterative)", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"Q\" for Bi-TonicSort", header2X, headerY + rowTracker, width/2.5f, headerY*2);


rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"H\" for QuickSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"R\" for CycleSort", header2X, headerY + rowTracker, width/2.5f, headerY*2);


rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"I\" for DualPivotQuickSort", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"S\" for PigeonHoleSort", header2X, headerY + rowTracker, width/2.5f, headerY*2);

rowTracker += headerY*2;
rowTracker += height/40.0f;
text("\"J\" for HeapSort (Max Heap)", headerX, headerY + rowTracker, width/2.5f, headerY*2);
text("\"T\" for TimSort", header2X, headerY + rowTracker, width/2.5f, headerY*2);

rowTracker += headerY*2;
rowTracker += height/40.0f;

strokeWeight(3);
stroke(0,0,4,10);
line(0, rowTracker, width, rowTracker);

strokeWeight(1);
stroke(0,0,10,10);

rowTracker += headerY;
rowTracker += height/144.0f;

textSize(height/35.0f);
text("Display Modes:  '0' for Spectrum, '1' for Sticks, '2' for Triangle, '3' for Boxes.", width/2, headerY + rowTracker, width/1.2f, headerY * 2);

rowTracker += headerY*2;
rowTracker += height/72.0f;
text("Pointer Modes:  '7' for flying lines, '8' for Arrows, '9' for regular lines, '5' for no pointer lines.  '6' to toggle sound on or off.", width/2, headerY + rowTracker, width/1.2f, headerY * 2);

rowTracker += headerY*2;
rowTracker += height/72.0f;
text("Space bar for this menu.  Selecting a draw mode before the sort *may* crash, or I *may* have fixed it.  Feel lucky?", width/2, headerY + rowTracker, width/1.2f, headerY * 2);

rowTracker += headerY*2;
rowTracker += height/72.0f;
text("Triangle Display Mode(2) only runs with Arrows(8).  Boxes Display Mode(3) has its own pointer display built-in.", width/2, headerY + rowTracker, width/1.2f, headerY * 2);


runOK = false;
}
public static int[] genArray (int elements)
{

  int[] genArr = new int[elements*2];

  for (int i = 0; i < elements; i++) {
    genArr[i] = i;
  }

  return(genArr);
}

public static int[] setupArray (int size, boolean doShuffle) {


  int[] arr = genArray(size);
  // if passed false, will pass back a sorted array of size.

  if (doShuffle) {
    shuffleArray(arr);
    return arr;
  } else {
    return arr;
  }
}

public static void shuffleArray(int[] array) {
  int temp = 0;
  int n = aSize;

  for (int i=0; i < n; i++) {
    int r = (int) (Math.random() * (i + 1));
    temp = array[r];
    array[r] = array[i];
    array[i] = temp;
    //    snap(array, i, aSize);
  }
}

public static void snap (int[] array, int pointer0, int pointer1) {


  // ptr[0] value of index for first pointer
  // ptr[1] value of index for 2nd pointer
  // ptr[2] value of array[pointer0]
  // ptr[3] value of array[pointer1]

  int[] ptr = new int[4];

  // value clamping is used as sometimes a variable too small or two large can get passed.
  // sometimes, to get a more interesting drawing, add or subtract 1 to one of the pointers, to put it ahead of the action.
  // clamping lets me not worry about array access errors when I do this.


  ptr[0] = Math.max(Math.min(pointer0, aSize-1), 0); // clamps the value recorded to the array dimensions.
  ptr[1] = Math.max(Math.min(pointer1, aSize-1), 0); // clamps the value recorded to the array dimensions.
  ptr[2] = array[ptr[0]];
  ptr[3] = array[ptr[1]];

  // The pointers are a list, because it can be useful to grab several pointers back.
  ptrList.add(ptr.clone());

  // the arrays are a queue, because they're usually only accessed once.  Until they're not.  Then you need aList.
  // aQueue.add(array.clone());
  aList.add(array.clone());
}


public void resetPreSortVars() {
  
  swaps = 0;  // put 'swaps++' in sort algorithms when array elements get exchanged.
  aas = 0;    // put 'aas++' in sort algos at points where there are Array Accesses.
  comps = 0;  // put in 'comps++' where elements are compared < or > or = or 1.
  snaps = 0;  // more diagnostic.  uses 'snaps++' instead of snap() to estimate drawing steps.
  lines = 0;  // place a ++ in code whereever lines are drawn.  If a triangle, 'lines+=3'.
  refresh = 0; // place in code after a background() call.  Counts screen clears.

  // Benchmarking

  iter = 0;                 // iteration variable for draw() loop.  frameCount doesn't work with my code.

  drawArrayDone = false;  // used to do post-sort animation.
  iter2 = 0;         // Iteration variable for post array animation.

  aList.clear(); // where array lists are stored with snap() then played back in draw()
  ptrList.clear(); // where sort pointers are stored with snap() then played back in draw()

  samePitchQuench = true;  // keeps sound from playing same pitch.
}

public void resetPreDrawVarsAndGo() {
  hueRange = aSize * colourFactor;   

  colorMode(HSB, hueRange, 10, 10, 10); // changed from 100 to 10; look for magentas; change accordingly.
  yR = ht/(aSize); // Y axis ratio to set line height scale.
  xR = wd/aSize;          // X axis ratio to scale line strokeWeight


loop();
 runOK = true;
 running = true;
}
 //<>//

//*************************************ARRAY DRAWING CODE*****************************************
//    drawSpectrum:  draws a wedge from left bottom to right top, in spectral colours.
//    drawSticks:    draws lines that are anchored to their array indicies at bottom, and their unsorted value at top
//    drawTriangleSpectrum:  draws lines that are vertically  centered, left to right.
//    drawBoxedArray:  draws a numbered grid of rectangles; needs an aSize of 400 to display properly.




public void drawSpectrum(int array[]) {

  // this version onward will draw colourful arrays.
  // it depends on colorMode(HSB, aSize, 100, 100, 100); being called in setup()

  //  snaps++;
  background(0);
  refresh++;


  for (int i=0; i < aSize; i++) {

    stroke(array[i] + colourOffset, 10, 10, 10);  // each line coloured to its value.
    strokeWeight(xR); //lines fill screen

    //draw main array

    float x1 = i * xR;  //  verticle lines
    //    float x1 = array[i] * xR; // lines anchored on bottom in right places.
    float y1 = height;        // lines bend to the bottom.
    float x2 = i * xR;    //
    float y2 = height - (array[i] * yR);

    line(x1, y1, x2, y2);
    lines++;
  }
}


public void drawTriangleSpectrum(int array[]) {



  background(0);
  refresh++;

  // float hR is height ratio in main.
  // float wR is width ratio in main.



  for (int i=0; i < aSize; i++) {

    stroke(array[i] + colourOffset, 10, 10, 10);  // each line coloured to its value.
    strokeWeight(xR); //lines fill screen

    //draw main array

    float x1 = i * xR;  //  both start and end of xPos here are at the index of the array.

    float y1 = height/2 + (array[i] * yR)/2;
    float x2 = x1;      // xPos doesn't move.
    float y2 = height/2 - (array[i] * yR)/2;

    line(x1, y1, x2, y2);
    lines++;
  }
}

public void drawSticks(int array[]) {

  // this method will draw mixed-up sticks.
  // The bottom of the stick is anchored to its array position
  // which is, for this data, its sorted position.
  // the top of the stick is anchored to its place in the array.
  // as the array is sorted, the sticks will be moved to an upright position.


  background(0);
  refresh++;

  // float hR is height ratio in main.
  // float wR is width ratio in main.

  //  float hueRange = aSize * colourFactor;

  stroke(0, 0, 10, 10);  // white unless colourMode == 1

  for (int i=0; i < aSize; i++) {

    if (colourMode == 1) {
      stroke(array[i] + colourOffset, 10, 10, 10);  // each line coloured to its value.
    } else {
      stroke(0, 0, 10, 10);  // white unless colourMode == 1
    }
    strokeWeight(xR); //lines fill screen

    //draw main array

    //   float x1 = i * xR;  //  verticle lines
    float x1 = array[i] * xR; // lines anchored on bottom in right places.
    float y1 = height;        // lines bend to the bottom.
    float x2 = i * xR;    //
    float y2 = height - (array[i] * yR);

    line(x1, y1, x2, y2);
    lines++;
  }
}


public void drawBoxedArray(int[] array) { //  Thanks to SCF@Styrocord for the help!
  noStroke();
  rectMode(CENTER);
  textAlign(CENTER, CENTER);

  if (aSize > 600) {
    textSize(18);
  } else {
    textSize(24);
  }

  if (aSize > 800) {
    textSize(12);
  }

  int row = 20;
  int col = aSize/row; // aSize is the array length; 400 works with this, draws off the screen with other values.

  float rectWd = (float)width/col;
  float rectHt = (float)height/row;

  int ptr[] = ptrList.get(iter);  // iter is the main counter that's incremented in the draw() loop that calls this method.

  int i = 0;
  for (int y = 0; y < row; y++) {

    for (int x = 0; x < col; x++ )
    {

      fill(array[i], 10, 10, 10);    // fill with colour corresponding to the element value.

      if (iter < aList.size() -1) {   // code for the white & black boxes that show the swap or index pointers.
        if (array[i] == ptr[2]) {    // stops drawing those before the last loop.
          fill(0, 0, 0, 10);
        } else if (array[i] == ptr[3]) {
          fill(0, 0, 10, 10);
        }
      }
      float rectCtrX = (x * rectWd) + (0.5f * rectWd);
      float rectCtrY = (y * rectHt) + (0.5f * rectHt);

      rect(rectCtrX, rectCtrY, rectWd, rectHt);
      fill((array[i] + hueRange/2)%hueRange, 10, 10, 10);
      text("" +array[i], rectCtrX, rectCtrY, rectWd, rectHt);
      i++;
    }
  }
}

//************************************POINTER DRAWING CODE***************************************

public void drawTrails() {

  // this trail-drawing method draws several pointers based on past data,
  // flying in from the top left and bottom right corner.
  // the pointers fade out as the opacity of the line decreases.

  strokeWeight(xR * 2);
  float transp = 5.0f;
  int trails = 10;

  int spaces = 2;
  float steps = (float)transp/trails;




  if (iter > (trails * spaces) && iter < ptrList.size() - 2) {


    for (int j = 0; j < trails*spaces; j+= spaces) {


      int[] oldPtr = ptrList.get(iter - j);



      stroke(0, 0, 10, transp);



      float x12  =  oldPtr[0] * xR;
      //     float y1  =  height - array[oldPtr[0]] * yR;
      float y1  =  height - oldPtr[2] * yR;
      float y2 =  height;
      line(x12, y1, width + 100, height + 100);  // anchor end of pointer well offscreen
      lines++;


      stroke(0, 0, 10, transp); //white line

      x12 = oldPtr[1] * xR ;
      y1 = 0;
      //      y2 = height-array[oldPtr[1]] * yR;
      y2 = height-oldPtr[3] * yR;

      line(-100, -100, x12, y2);  // -640 anchor end of pointer well offscreen
      transp -= steps;
      lines++;
    }
  } else {
    // since the main code pulls past data, it can't start immediately.
    // this just draws single lines at the start so there won't be a blank
    // spot in the animation.
    int[] ptr = ptrList.get(iter);
    stroke(0, 0, 10, transp);
    float x12  =  ptr[0] * xR;
    float y1  =  height - ptr[2] * yR;
    float y2 =  height;
    line(x12, y1, width + 100, height + 100);  // anchor end of pointer well offscreen
    lines++;

    stroke(0, 0, 10, transp);
    x12 = ptr[1] * xR ;
    y1 = 0;
    y2 = height-ptr[3] * yR;

    line(-100, -100, x12, y2);  // -640 anchor end of pointer well offscreen
    transp -= steps;
    lines++;
  }
}

public void drawPtrLines() {


  if (iter < aList.size() -1) {

    int[] newPtr = ptrList.get(iter);
    strokeWeight(xR);
    stroke(0, 0, 10, 10);
    float x12  =  newPtr[0] * xR;
    float y1 = height + 36;
    float y2  =  height - newPtr[2] * yR;

    line(x12, y1, x12, y2);
    lines++;

    strokeWeight(xR);
    stroke(0, 0, 10, 10); //white line
    x12 = newPtr[1] * xR;
    y1 = -36;
    y2 = height-newPtr[3] * yR;

    line(x12, y1, x12, y2);

    lines++;
  }
}

public void ptrArrowDraw() {

  strokeWeight(xR/2);


  if (colourMode == 1) {
    stroke(0, 0, 10, 10);
  } else if (colourMode == 0) {
    stroke(0, 10, 10, 10);
  }

  int ptr[] = ptrList.get(iter);

  //  Bottom Up Arrow

  //vertex

  float x1  =  ptr[0] * xR;

  //   float y1  =  height - arr0Av * yR;
  float y1  =  height - 100;

  // right leg
  float x2  =  x1 - 5;
  float y2 =  height + 36;

  float x3 = x1 + 5;


  line(x1, y1, x2, y2);
  line(x1, y1, x3, y2);

  lines+=2;

  if (colourMode == 1) {
    stroke(0, 0, 10, 10);
  } else if (colourMode == 0) {
    stroke(aSize * 1.25f/2, 10, 10, 10);
  }


  // BOTTOM DOWN ARROW

  //vertex
  //    x1 = oldPtr[1] * xR;
  x1 = ptr[1] * xR;
  y1 = 100 ;

  //right leg
  x2 = x1 - 5;
  y2 = -36;
  x3 = x1 + 5;
  //left leg
  //      line (x3, y2, x1, y1);


  line(x1, y1, x2, y2);
  line(x1, y1, x3, y2);

  lines+=2;
}

// The big & little finish methods need work.  They don't currently run.

public void bigFinish() { // do final animation 10 lines at a time.
  iter2 = aSize;

  strokeWeight(xR *1.2f); //lines fill screen
  if (iter2 + 10 > aSize) {
    lilFinish();
  } else {
    for (int i = 0; i < 10; i++) {


      stroke(iter2 + colourOffset, 10, 10, 10);  // full spectrum
      line(iter2 * xR, // X1
        height, // Y1
        iter2 * xR, // X2
        height - (iter2*yR)); // Y2
      lines++;

      float freq2 = (iter2+150) *1;
      float freq3 = (iter2+300) *2;

      snd0.play(freq2, 0.1f);

      env0.play(snd0, aT, sT, sL, rT);

      snd1.play(freq3, 0.1f);
      env1.play(snd1, aT, sT, sL, rT);
      iter2++;
    }
  }
}
public void lilFinish() { // do final animation just one line at a time.
  strokeWeight(xR *1.2f); //lines fill screen
  stroke(iter2 + colourOffset, 10, 10, 10);  // full spectrum
  line(iter2 * xR, // X1
    height, // Y1
    iter2 * xR, // X2
    height - (iter2*yR)); // Y2
  lines++;
  iter2++;
  //  println("lilfinish");
}

public void bigTriFinish() { // do final animation 10 lines at a time.
  strokeWeight(xR *1.2f); //lines fill screen
  if (iter2 + 10 > aSize) {
    lilTriFinish();
  } else {
    for (int i = 0; i < 10; i++) {


      stroke(iter2 + colourOffset, 10, 10, 10);  // full spectrum
      line(iter2 * xR, // X1
        height/2 + (iter2*yR)/2, // Y1
        iter2 * xR, // X2
        height/2 - (iter2*yR)/2); // Y2
      lines++;

      float freq2 = (iter2+150) *1;
      float freq3 = (iter2+300) *2;

      snd0.play(freq2, 0.1f);

      env0.play(snd0, aT, sT, sL, rT);

      snd1.play(freq3, 0.1f);
      env1.play(snd1, aT, sT, sL, rT);
      iter2++;
    }
  }
}
public void lilTriFinish() { // do final animation just one line at a time.
  strokeWeight(xR *1.2f); //lines fill screen
  stroke(iter2 + colourOffset, 10, 10, 10);  // full spectrum
  line(iter2 * xR, // X1
    height/2 + (iter2*yR)/2, // Y1
    iter2 * xR, // X2
    height/2 - (iter2*yR)/2); // Y2
  lines++;
  iter2++;
}

//***************************************************unsound tbh SOUND CODE*********************
public void soundPtr() {


  int[] ptr = ptrList.get(iter);

  float freq2 = (ptr[2]+150) *1;
  float freq3 = (ptr[3]+300) *2;
  int[] oldPtr = new int[4];
  if (iter > 1) {
    oldPtr = ptrList.get(iter -1 );
  }

  if (ptr[2] > 0 && ptr[2] < aSize -1) {
    if (ptr[2] == oldPtr[2] && samePitchQuench) {
    } else {
      snd0.play(freq2, 0.1f);
      env0.play(snd0, aT, sT, sL, rT);
    }
  }
  if (ptr[3] > 0 && ptr[3] < aSize -1) {
    if (ptr[3] == oldPtr[3] && samePitchQuench) {
    } else {
      snd1.play(freq3, 0.1f);
      env1.play(snd1, aT, sT, sL, rT);
    }
  }
}

public void writeSortName(float size) {

  
  fill(0, 0, 10, 10);                 // white text
  textSize(size - 5);
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  text(sortName, width/2, height + size/2, width, size);
 
}
public static void bubbleSort(int arr[])
{
  sortName = "Bubble Sort";
  int i, j, temp;
  int n = aSize;
  boolean swapped;

  for (i = 0; i < n - 1; i++) {

    swapped = false;

    for (j = 0; j < n - i - 1; j++) {

      if (arr[j] > arr[j + 1]) {
        temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
        swapped = true;
      }

      snap(arr, j, j + 1);
    }
    // If no two elements were
    // swapped by inner loop, then break
    if (swapped == false)
    {
      //     snap(arr, 0, aSize -1);
    }
  }

  //snap(arr, 0, aSize -1);
}

public static void cocktailSort(int[] nums)

{
  sortName = "Cocktail Shaker Sort";
  boolean swapped;
  do {
    swapped = false;
    for (int i =0; i<=  aSize  - 2; i++) {

      if (nums[ i ] > nums[ i + 1 ]) {

        //test if two elements are in the wrong order
        int temp = nums[i];
        nums[i] = nums[i+1];
        nums[i+1]=temp;
        swapped = true;
        snap(nums, i, i);
      }
    }
    if (!swapped) {
      break;
    }
    swapped = false;
    for (int i= aSize - 2; i>=0; i--) {
      if (nums[ i ] > nums[ i + 1 ]) {
        int temp = nums[i];
        nums[i] = nums[i+1];
        nums[i+1]=temp;
        swapped = true;
        snap(nums, i-1, i-1);
      }
    }
  } while (swapped);
  snap(nums, 0, aSize -1);
}



// Java program for implementation of Comb Sort




public static void combSort (int[] array)


{
  sortName = "Comb Sort";

  int n = aSize;
  snap(array, 0, n-1);
  // initialize gap
  int gap = n;

  // Initialize swapped as true to make sure that
  // loop runs
  boolean swapped = true;

  // Keep running while gap is more than 1 and last
  // iteration caused a swap
  while (gap >= 1 && swapped == true)
  {
    // Find next gap
    gap = getNextGap(gap);

    // Initialize swapped as false so that we can
    // check if swap happened or not
    swapped = false;

    // Compare all elements with current gap
    for (int i=0; i<n-gap; i++)
    {
      snap(array, i, i + gap);

      if (array[i] > array[i+gap])
      {
        // Swap arr[i] and arr[i+gap]
        int temp = array[i];
        array[i] = array[i+gap];
        array[i+gap] = temp;

        //     snap(array, i, i + gap, aList, ptrList);

        // Set swapped
        swapped = true;
      }
    }
  }
}

public static int getNextGap(int gap)
{
  // Shrink gap by Shrink factor
  gap = (gap*10)/13;
  if (gap < 1)
    return 1;
  return gap;
}
// Java program to implement cycle sort



// Function sort the array using Cycle sort
public static void cycleSort(int arr[])
{
  sortName = "Cycle Sort";
  // count number of memory writes
  int writes =0;
  int n = aSize;

  // traverse array elements and put it to on
  // the right place
  for (int cycle_start = 0; cycle_start <= n - 2; cycle_start++) {
    // initialize item as starting point
    int item = arr[cycle_start];
    aas++;
    // Find position where we put the item. We basically
    // count all smaller elements on right side of item.
    int pos = cycle_start;
    for (int i = cycle_start + 1; i < n; i++)
      if (arr[i] < item) {
        pos++;
        aas++;
        comps++;
        snap(arr, 0, i);
      }

    // If item is already in correct position
    if (pos == cycle_start)
      continue;

    // ignore all duplicate elements
    while (item == arr[pos])
      pos += 1;
    aas++;

    // put the item to it's right position
    if (pos != cycle_start) {
      int temp = item;
      item = arr[pos];
      arr[pos] = temp;
      writes++;
      aas+=2;
      snap(arr, 0, pos);
    }

    // Rotate rest of the cycle
    while (pos != cycle_start) {
      pos = cycle_start;

      // Find position where we put the element
      for (int i = cycle_start + 1; i < n; i++)
        if (arr[i] < item)
          pos += 1;
      aas++;
      comps++;
      // ignore all duplicate elements
      while (item == arr[pos])
        pos += 1;

      // put the item to it's right position
      if (item != arr[pos]) {
        int temp = item;
        item = arr[pos];
        arr[pos] = temp;
        writes++;
        comps++;
        aas+=3;
        snap(arr, 0, pos);
      }
      aas++;
      comps++;
      snap(arr, 0, pos);
    }
    snap (arr, 0, pos);
  }
  snap(arr, 0, aSize);
}


// Main function to do heap sort
public static  void heapSort(int arr[]) {
  sortName = "Max Heap Sort";
  int n = aSize;
  // Build heap (rearrange array)
  for (int i = n / 2 - 1; i >= 0; i--) {

    heapify(arr, n, i);
  }

  // One by one extract an element from heap
  for (int i = n - 1; i > 0; i--) {

    // Move current root to end
    int temp = arr[0];
    arr[0] = arr[i];
    arr[i] = temp;
    swaps++;
    aas+=3;
    snap(arr, 0, i);

    // Call max heapify on the reduced heap
    heapify(arr, i, 0);
  }
  //        snap(arr, 0, 0);
  //      return(arr);   //replace if method nees to be int[]
}


// To heapify a subtree rooted with node i
// which is an index in arr[].
public static void heapify(int arr[], int n, int i) {

  // Initialize largest as root
  int largest = i;

  // left index = 2*i + 1
  int l = 2 * i + 1;

  // right index = 2*i + 2
  int r = 2 * i + 2;

  // If left child is larger than root
  if (l < n && arr[l] > arr[largest]) {
    largest = l;
    aas+=2;
    comps++;
  }

  // If right child is larger than largest so far
  if (r < n && arr[r] > arr[largest]) {
    largest = r;
    aas+=2;
    comps++;
  }

  // If largest is not root
  if (largest != i) {
    int temp = arr[i];
    arr[i] = arr[largest];
    arr[largest] = temp;
    swaps++;
    aas+=3;
    snap(arr, i, largest);
    // Recursively heapify the affected sub-tree
    heapify(arr, n, largest);
  }
}


public void insertionSort(int arr[])
{

  sortName = "Insertion Sort";
  int n = aSize;
  for (int i = 1; i < n; ++i) {
    int key1 = arr[i];
    int j = i - 1;

    snap(arr, i, j+1);

    /* Move elements of arr[0..i-1], that are
     greater than key, to one position ahead
     of their current position */
    while (j >= 0 && arr[j] > key1) {
      arr[j + 1] = arr[j];
      j = j - 1;

      snap(arr, i, j+1);
    }
    arr[j + 1] = key1;



    snap(arr, i, j+1);
  }

  snap(arr, 0, aSize - 1);
}
// Java implementation of Introsort algorithm

// doesn't yet work

public class Introsort {

  // the actual data that has to be sorted
  private int a[];

  // the number of elements in the data
  private int n;

  // Constructor to initialize the size
  // of the data
  Introsort(int n)
  {
    a = new int[n];
    this.n = 0;
  }

  // The utility function to insert the data
  private void dataAppend(int temp)
  {
    a[n] = temp;
    n++;
  }

  // The utility function to swap two elements
  private void swap(int i, int j)
  {
    int temp = a[i];
    a[i] = a[j];
    a[j] = temp;
  }

  // To maxHeap a subtree rooted with node i which is
  // an index in a[]. heapN is size of heap
  private void maxHeap(int i, int heapN, int begin)
  {
    int temp = a[begin + i - 1];
    int child;

    while (i <= heapN / 2) {
      child = 2 * i;

      if (child < heapN
        && a[begin + child - 1] < a[begin + child])
        child++;

      if (temp >= a[begin + child - 1])
        break;

      a[begin + i - 1] = a[begin + child - 1];
      i = child;
    }
    a[begin + i - 1] = temp;
  }

  // Function to build the heap (rearranging the array)
  private void introHeapify(int begin, int end, int heapN)
  {
    for (int i = (heapN) / 2; i >= 1; i--)
      maxHeap(i, heapN, begin);
  }

  // main function to do heapsort
  private void introHeapSort(int begin, int end)
  {
    int heapN = end - begin;

    // Build heap (rearrange array)
    this.introHeapify(begin, end, heapN);

    // One by one extract an element from heap
    for (int i = heapN; i >= 1; i--) {

      // Move current root to end
      swap(begin, begin + i);

      // call maxHeap() on the reduced heap
      maxHeap(1, i, begin);
    }
  }

  // function that implements insertion sort
  private void introInsertionSort(int left, int right)
  {

    for (int i = left; i <= right; i++) {
      int key1 = a[i];
      int j = i;

      // Move elements of arr[0..i-1], that are
      // greater than the key, to one position ahead
      // of their current position
      while (j > left && a[j - 1] > key1) {
        a[j] = a[j - 1];
        j--;
      }
      a[j] = key1;
    }
  }

  // Function for finding the median of the three elements
  private int findPivot(int a1, int b1, int c1)
  {
    int max = Math.max(Math.max(a[a1], a[b1]), a[c1]);
    int min = Math.min(Math.min(a[a1], a[b1]), a[c1]);
    int median = max ^ min ^ a[a1] ^ a[b1] ^ a[c1];
    if (median == a[a1])
      return a1;
    if (median == a[b1])
      return b1;
    return c1;
  }

  // This function takes the last element as pivot, places
  // the pivot element at its correct position in sorted
  // array, and places all smaller (smaller than pivot)
  // to the left of the pivot
  // and greater elements to the right of the pivot
  private int partition(int low, int high)
  {

    // pivot
    int pivot = a[high];

    // Index of smaller element
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {

      // If the current element is smaller
      // than or equal to the pivot
      if (a[j] <= pivot) {

        // increment index of smaller element
        i++;
        swap(i, j);
      }
    }
    swap(i + 1, high);
    return (i + 1);
  }

  // The main function that implements Introsort
  // low --> Starting index,
  // high --> Ending index,
  // depthLimit --> recursion level
  private void sortDataUtil(int begin, int end, int depthLimit)
  {
    if (end - begin > 16) {
      if (depthLimit == 0) {

        // if the recursion limit is
        // occurred call heap sort
        this.introHeapSort(begin, end);
        return;
      }

      depthLimit = depthLimit - 1;
      int pivot = findPivot(begin,
        begin + ((end - begin) / 2) + 1,
        end);
      swap(pivot, end);

      // p is partitioning index,
      // arr[p] is now at right place
      int p = partition(begin, end);

      // Separately sort elements before
      // partition and after partition
      sortDataUtil(begin, p - 1, depthLimit);
      sortDataUtil(p + 1, end, depthLimit);
    } else {
      // if the data set is small,
      // call insertion sort
      introInsertionSort(begin, end);
    }
  }

  // A utility function to begin the
  // Introsort module
  private void sortData()
  {
    sortName = "Introspective Sort";

      // Initialise the depthLimit
      // as 2*log(length(data))
      int depthLimit = (int)(2 * Math.floor(Math.log(n) /  Math.log(2)));

    this.sortDataUtil(0, n - 1, depthLimit);
  }
}

//***************************************************In-place Merge Sort*********************************

public void mergeSort(int arr[], int left, int right) {

  sortName = "In-place Merge Sort";

  if (left < right) {

    // Same as (l + r) / 2, but avoids overflow
    // for large l and r
    int mid = left + (right - left) / 2;

    // Sort first and second halves

    mergeSort(arr, left, mid);

    mergeSort(arr, mid + 1, right);

    merge(arr, left, mid, right);


    snap(arr, left, right+1);
  }

  //  snap(arr, left, right+1);
}

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
// Inplace Implementation
public void merge(int arr[], int start, int mid, int end)
{


  int start2 = mid + 1;


  // If the direct merge is already sorted
  if (arr[mid] <= arr[start2]) {
    comps++;
    aas+=2;
    return;
  }

  // Two pointers to maintain start
  // of both arrays to merge
  while (start <= mid && start2 <= end) {

    // If element 1 is in right place
    if (arr[start] <= arr[start2]) {
      start++;
      comps+=2;
      aas+=2;
    } else {
      int value = arr[start2];
      aas++;
      int index = start2;

      // Shift all the elements between element 1
      // element 2, right by 1.
      while (index != start) {
        arr[index] = arr[index - 1];
        index--;
        aas+=2;
      }
      arr[start] = value;
      aas++;
      snap(arr, start, start2+1);

      // Update all the pointers
      start++;
      mid++;
      start2++;
    }

    //   snap(arr, start, mid+1);
  }
  snap(arr, start, end+1);
}

/* l is for left index and r is right index of the
 sub-array of arr to be sorted */




//public static void oddEvenSort(int[] arr) {
//  int threadNum = aSize/2;
//  CyclicBarrier barr = new CyclicBarrier(threadNum);
//  ExecutorService exec = Executors.newFixedThreadPool(threadNum);
//  Future<?>[] awaits = new Future<?>[threadNum];
//  for (int i = 0; i < threadNum; i++) {
//    awaits[i] = exec.submit(new CompareSwapThread(arr, 2*i + 1, barr));
//  }
//  for (int i = 0; i < threadNum; i++) {
//    try {
//      awaits[i].get();
//    }
//    catch (InterruptedException | ExecutionException e) {
//      e.printStackTrace();
//    }
//  }
//}


//  class CompareSwapThread implements Runnable {
//    private int[] arr;
//    private int index;
//    private CyclicBarrier barr;

//    public CompareSwapThread(int[] arr, int index, CyclicBarrier barr) {
//      this.arr = arr;
//      this.index = index;
//      this.barr = barr;
//    }

//    @Override
//      public void run() {
//      for (int i = 0; i < aSize; i++) {
//        if (arr[index - 1] > arr[index]) {
//          int t = arr[index - 1];
//          arr[index - 1] = arr[index];
//          arr[index] = t;
//        }
//        try {
//          barr.await();
//        }
//        catch (InterruptedException | BrokenBarrierException e) {
//          e.printStackTrace();
//        }
//        if (index + 1 < aSize && arr[index] > arr[index + 1]) {
//          int t = arr[index];
//          arr[index] = arr[index + 1];
//          arr[index + 1] = t;
//        }
//        try {
//          barr.await();
//        }
//        catch (InterruptedException | BrokenBarrierException e) {
//          e.printStackTrace();
//        }
//      }
//    }
//  }
// Java program to perform
// iterative merge sort.


// Main sorting function


public static void iterativeMergeSort(int[] arr) {

  sortName = "Iterative Merge Sort";
  
  int n = aSize;

  // Iterate through subarrays of increasing size
  for (int currSize = 1; currSize <= n - 1;
    currSize = 2 * currSize) {

    // Pick starting points of different
    // subarrays of current size
    for (int leftStart = 0; leftStart < n - 1;
      leftStart += 2 * currSize) {

      // Find endpoints of the subarrays to be merged
      int mid = Math.min(leftStart + currSize - 1, n - 1);
      int rightEnd = Math.min(leftStart + 2 * currSize - 1, n - 1);

      // Merge the subarrays arr[leftStart...mid]
      // and arr[mid+1...rightEnd]
      iterativeMerge(arr, leftStart, mid, rightEnd);
    }
    snap(arr, 0, aSize);
  }
  snap(arr, 0, aSize);
}

public static void iterativeMerge(int arr[], int start, int mid, int end)
{


  int start2 = mid + 1;


  // If the direct merge is already sorted
  if (arr[mid] <= arr[start2]) {
    comps++;
    aas+=2;
    return;
  }

  // Two pointers to maintain start
  // of both arrays to merge
  while (start <= mid && start2 <= end) {

    // If element 1 is in right place
    if (arr[start] <= arr[start2]) {
      start++;
      comps+=2;
      aas+=2;
    } else {
      int value = arr[start2];
      aas++;
      int index = start2;

      // Shift all the elements between element 1
      // element 2, right by 1.
      while (index != start) {
        arr[index] = arr[index - 1];
        index--;
        aas+=2;
      }
      arr[start] = value;
      aas++;
      snap(arr, start, start2+1);

      // Update all the pointers
      start++;
      mid++;
      start2++;
    }

    //   snap(arr, start, mid+1);
  }
  snap(arr, start, end+1);
}
/* Java program to implement Pigeonhole Sort */

public static void pigeonholeSort(int arr[])
{
  sortName = "Pigeonhole Sort";
  int min = arr[0];
  int max = arr[0];
  int range, i, j, index;
  int n = aSize;

  for (int a=0; a<n; a++)
  {
    if (arr[a] > max) {
      max = arr[a];
      aas+=2;
    }
    comps++;
    aas++;

    if (arr[a] < min) {
      min = arr[a];
      aas+=2;
    }
    comps++;
  }

  range = max - min + 1;

  int[] phole = new int[range];

  Arrays.fill(phole, 0);

  aas+= range;
  snap(phole, 0, aSize);

  for (i = 0; i<n; i++) {
    phole[arr[i] - min]++;
    aas++;
    snap(phole, i, aSize);
  }
snap(arr, 0, aSize);
  index = 0;

  for (j = 0; j<range; j++) {
    while (phole[j]-->0) {
      arr[index++]=j+min;
      aas++;
      snap(arr, 0, j);
    }
  }
}

//************************************************************************************************************
// The QuickSort function implementation

public static void quickSort(int arr[], int low, int high) {

sortName = "QuickSort";

  if (low < high) {

    // partitionIndex is the partition return index of pivot

    int partitionIndex = qsPartition(arr, low, high);

    // Recursion calls for smaller elements
    // and greater or equals elements

    quickSort(arr, low, partitionIndex - 1);

    //      snap(arr, low, partitionIndex);

    quickSort(arr, partitionIndex + 1, high);
//    snap(arr, partitionIndex + 1, high);
  }

}

// Partition function
public static int qsPartition(int[] arr, int low, int high)
{

  // Choose the pivot
  int pivot = arr[high];
  aas++; // array access.

  // Index of smaller element and indicates
  // the right position of pivot found so far
  int i = low - 1;

  // Traverse arr[low..high] and move all smaller
  // elements to the left side. Elements from low to
  // i are smaller after every iteration

  for (int j = low; j <= high - 1; j++) {


    if (arr[j] < pivot) {
      i++;

      comps++;  // counts as a comparison.
      aas++; // counts as an array access.

      qsSwap(arr, i, j);
    }
  }

  // Move pivot after smaller elements and
  // return its position

  qsSwap(arr, i + 1, high);

  return i + 1;
}

// Swap function

public static void qsSwap( int[] arr, int i, int j)
{

  int temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
  aas+=4;
  // The _only_ snapshot needed. maybe.

  snap(arr, i, j);
}


//*******************************************************************************************

// Java implementation of MSD Radix Sort
// of MSD Radix Sort using counting sort()


// A utility function to get the digit
// at index d in a integer
public static int digit_at(int x, int d)
{
  return (int)(x / Math.pow(base, d - 1)) % base;
}

// The main function to sort array using
// MSD Radix Sort recursively
public static int[] MSD_sort(int[] arr, int lo, int hi, int d)
{
  sortName = "Radix MSD Sort";
  //snap(arr, lo, hi);  // Snap 1
  // recursion break condition
  if (hi <= lo) {
    //    snap(arr, lo, hi); // Snap 2
    return arr;
  }

  int count[] = new int[base + 2];

  // temp is created to easily swap Strings in arr[]
  HashMap<Integer, Integer> temp = new HashMap<>();

  // Store occurrences of most significant character
  // from each integer in count[]
  for (int i = lo; i <= hi; i++) {
    int c = digit_at(arr[i], d);
    count[c + 2]++;
  }

  // Change count[] so that count[] now contains actual
  //  position of this digits in temp[]
  for (int r = 0; r < base + 1; r++) {
    count[r + 1] += count[r];
  }
  // Build the temp
  for (int i = lo; i <= hi; i++) {
    int c = digit_at(arr[i], d);

    if (temp.containsKey(count[c + 1]+1)) {

      temp.put(count[c + 1]++, arr[i]);
    } else {

      temp.put(count[c + 1]++, arr[i]);
    }
  }

  // Copy all integers of temp to arr[], so that arr[] now
  // contains partially sorted integers
  for (int i = lo; i <= hi; i++) {
    if (temp.containsKey(i-lo)) {
      arr[i] = temp.get(i - lo);
      snap(arr, i, hi); // Snap3
    }
  }
  // Recursively MSD_sort() on each partially sorted
  // integers set to sort them by their next digit
  for (int r = 0; r < base; r++) {
    arr = MSD_sort(arr, lo + count[r], lo + count[r + 1] - 1, d - 1);
    //   snap(arr, r, aSize); // Snap4
  }

  //  snap(arr, 0, aSize); // Snap5
  return arr;
}

// function find the largest integer
public static int getMMax(int arr[], int n)
{
  int mx = arr[0];
  for (int i = 1; i < n; i++) {
    if (arr[i] > mx) {
      mx = arr[i];
    }
  }
  return mx;
}

// Main function to call MSD_sort
public static int[] radixMSDSort(int[] arr)
{
  int n = aSize;
  // Find the maximum number to know number of digits
  int m = getMMax(arr, n);

  // get the length of the largest integer
  int d = (int)Math.floor((Math.log(Math.abs(m))/Math.log(base))) + 1;
//  int d = (int)Math.floor(Math.log10(Math.abs(m))) + 1;  original

  // function call
  return MSD_sort(arr, 0, n - 1, d);
}
// Radix sort Java implementation

// A utility function to get maximum value in arr[]
public static int getMax(int arr[], int n)
{
  int mx = arr[0];
  for (int i = 1; i < n; i++) {
    if (arr[i] > mx) {
      mx = arr[i];
    }
  }
  return mx;
}

// A function to do counting sort of arr[] according to
// the digit represented by exp.
public static void countSort(int arr[], int n, int exp)
{
  int output[] = new int[n]; // output array
  int i;
  int count[] = new int[base];
  Arrays.fill(count, 0);

  // Store count of occurrences in count[]
  for (i = 0; i < n; i++) {
    count[(arr[i] / exp) % base]++;
  }
  // Change count[i] so that count[i] now contains
  // actual position of this digit in output[]
  for (i = 1; i < base; i++) {
    count[i] += count[i - 1];
  }
  // Build the output array
  for (i = n - 1; i >= 0; i--) {
    output[count[(arr[i] / exp) % base] - 1] = arr[i];
    count[(arr[i] / exp) % base]--;
    snap(output, 0, arr[i]);
  }

  //  snap(output, 0, iter);

  // Copy the output array to arr[], so that arr[] now
  // contains sorted numbers according to current
  // digit
  for (i = 0; i < n; i++) {
    arr[i] = output[i];
  }
}

// The main function to that sorts arr[] of
// size n using Radix Sort
public static void radixSort(int arr[])
{
  sortName = "Radix LSD Sort";
  int n = aSize;
  // Find the maximum number to know number of digits
  int m = getMax(arr, n);

  // Do counting sort for every digit. Note that
  // instead of passing digit number, exp is passed.
  // exp is 10^i where i is current digit number
  for (int exp = 1; m / exp > 0; exp *= base)
    countSort(arr, n, exp);
}


public static void selectionSort(int arr[])
{
  sortName = "Selection Sort";
  int n = aSize;
  for (int i = 0; i < n-1; i++)
  {
    int index = i;
    int min = arr[i];
    for (int j = i+1; j < n; j++)
    {
      if (arr[j] < arr[index])
      {
        index = j;

        min = arr[j];
        snap(arr, i-1, j);
      }
      snap (arr, i-1, j);
    }
    int t = arr[index];
    arr[index] = arr[i];
    arr[i] = t;
    snap(arr, i, index);
  }
  snap(arr, 0, aSize -1);
}

public static void shellSort(int[] arr) {

  sortName = "Shell's Sort";
  
  int n = aSize;


  for (int gap = n / 2; gap > 0; gap /= 2) {

    for (int i = gap; i < n; i++) {
      int key1 = arr[i];
      aas++;
      int j = i;



      while (j >= gap && arr[j - gap] > key1) {
        arr[j] = arr[j - gap];
        j -= gap;
        comps++;
        swaps++;
        aas+=3;

        snap(arr, i, j - gap);
      }

      arr[j] = key1;
      aas++;
      snap(arr, i, j);
    }
    // needed to complete sort drawing
    snap(arr, 0, aSize - 1);
  }
  // needed to complete sort.
  snap(arr, 0, aSize -1);
}
// Java implementation


// Define the Leonardo numbers
public static int leonardo(int k)
{
  if (k < 2) {
    return 1;
  }
  return leonardo(k - 1) + leonardo(k - 2) + 1;
}

// Build the Leonardo heap by merging
// pairs of adjacent trees
public static void smoothHeapify(int[] arr, int start, int end)
{
  int i = start;
  int j = 0;
  int k = 0;
  //  snap(arr, start, end); // Snap 0
  while (k < end - start + 1) {
    if ((k & 0xAAAAAAAA) != 0) {
      j = j + i;
      i = i >> 1;
    } else {
      i = i + j;
      j = j >> 1;
    }

    k = k + 1;
  }

  while (i > 0) {
    j = j >> 1;
    k = i + j;
    while (k < end) {
      if (arr[k] > arr[k - i]) {
        break;
      }
      int temp = arr[k];
      arr[k] = arr[k - i];
      arr[k - i] = temp;
      k = k + i;
      //       snap(arr, k, i); // Snap 1  Does nothing
    }
    snap(arr, i, j); // Snap C new
    i = j;
  }
}

// Smooth Sort function
public static void smoothSort(int[] arr)
{
  sortName = "Smooth Sort";
  int n = aSize;

  int p = n - 1;
  int q = p;
  int r = 0;

  // Build the Leonardo heap by merging
  // pairs of adjacent trees
  while (p > 0) {
    if ((r & 0x03) == 0) {
      smoothHeapify(arr, r, q);
      //       snap(arr, r, q);      //Snap A new
    }

    if (leonardo(r) == p) {
      r = r + 1;
    } else {
      r = r - 1;
      q = q - leonardo(r);
      smoothHeapify(arr, r, q);
      //        snap(arr, r, q); //  Snap B new
      q = r - 1;
      r = r + 1;
    }

    int temp = arr[0];
    arr[0] = arr[p];
    arr[p] = temp;
    snap(arr, temp, p);  // Snap 2 Doesn't do much.
    p = p - 1;
  }

  // Convert the Leonardo heap
  // back into an array
  for (int i = 0; i < n - 1; i++) {
    int j = i + 1;
    //      snap(arr, i, j); // Snap 3
    while (j > 0 && arr[j] < arr[j - 1]) {
      int temp = arr[j];
      arr[j] = arr[j - 1];
      arr[j - 1] = temp;
      j = j - 1;
    }
    snap(arr, i, j);   //Snap 4 needs to be here or sort draw won't finish.
  }
}



public static int minRunLength(int n)
{
  assert n >= 0;

  // Becomes 1 if any 1 bits are shifted off
  int r = 0;
  while (n >= MIN_MERGE) {
    r |= (n & 1);
    n >>= 1;
  }
  return n + r;
}

// This function sorts array from left index to
// to right index which is of size atmost RUN


public static void timInsertionSort(int[] arr, int left,
  int right)
{
  for (int i = left + 1; i <= right; i++) {
    int temp = arr[i];
    aas++;
    int j = i - 1;
    while (j >= left && arr[j] > temp) {
      arr[j + 1] = arr[j];
      j--;
      comps++;
      aas+=3;
      //     snap(arr, i, j);
    }
    arr[j + 1] = temp;
    aas++;
    snap(arr, i, j+1);
  }
}

// Merge function merges the sorted runs
public static void timMerge(int arr[], int start, int mid, int end)
{


  int start2 = mid + 1;


  // If the direct merge is already sorted
  if (arr[mid] <= arr[start2]) {
    comps++;
    aas+=2;
    return;
  }

  // Two pointers to maintain start
  // of both arrays to merge
  while (start <= mid && start2 <= end) {

    // If element 1 is in right place
    if (arr[start] <= arr[start2]) {
      start++;
      comps++;
      aas+=2;
    } else {
      int value = arr[start2];
      aas++;
      int index = start2;

      // Shift all the elements between element 1
      // element 2, right by 1.
      while (index != start) {
        arr[index] = arr[index - 1];
        index--;
        aas+=2;
      }
      arr[start] = value;
      aas++;
      snap(arr, start, start2 + 1);

      // Update all the pointers
      start++;
      mid++;
      start2++;
    }

    //   snap(arr, start, mid+1);
  }
  snap(arr, start, end);
}
// Iterative Timsort function to sort the
// array[0...n-1] (similar to merge sort)


public static void timSort(int[] arr, int n)
{
  sortName = "Tim Sort";
  int minRun = minRunLength(MIN_MERGE);

  // Sort individual subarrays of size RUN
  for (int i = 0; i < n; i += minRun) {
    timInsertionSort(arr, i, Math.min((i + MIN_MERGE - 1), (n - 1)));
  }

  // Start merging from size
  // RUN (or 32). It will
  // merge to form size 64,
  // then 128, 256 and so on
  // ....
  for (int size = minRun; size < n; size = 2 * size) {

    // Pick starting point
    // of left sub array. We
    // are going to merge
    // arr[left..left+size-1]
    // and arr[left+size, left+2*size-1]
    // After every merge, we
    // increase left by 2*size
    for (int left = 0; left < n; left += 2 * size) {

      // Find ending point of left sub array
      // mid+1 is starting point of right sub
      // array
      int mid = left + size - 1;
      int right = Math.min((left + 2 * size - 1),
        (n - 1));

      // Merge sub array arr[left.....mid] &
      // arr[mid+1....right]
      if (mid < right)
        timMerge(arr, left, mid, right);
    }
  }
}
// Java program for Bitonic Sort. Note that this program
// works only when size of input is a power of 2.

// The parameter dir indicates the sorting direction,
// ASCENDING or DESCENDING; if (a[i] > a[j]) agrees
// with the direction, then a[i] and a[j] are
// interchanged.

public void compAndSwap(int a[], int i, int j, int dir)
{
  if ((a[i] > a[j] && dir == 1)
    || (a[i] < a[j] && dir == 0)) {
    // Swapping elements
    int temp = a[i];
    a[i] = a[j];
    a[j] = temp;
    snap(a, i, j);
  }
}

/* It recursively sorts a bitonic sequence in ascending
 order, if dir = 1, and in descending order otherwise
 (means dir=0). The sequence to be sorted starts at
 index position low, the parameter cnt is the number
 of elements to be sorted.*/
public void bitonicMerge(int a[], int low, int cnt, int dir)
{
  if (cnt > 1) {
    int k = cnt / 2;
    for (int i = low; i < low + k; i++)
      compAndSwap(a, i, i + k, dir);
    bitonicMerge(a, low, k, dir);
    bitonicMerge(a, low + k, k, dir);
  }
}

/* This function first produces a bitonic sequence by
 recursively sorting its two halves in opposite
 sorting orders, and then calls bitonicMerge to make
 them in the same order */
public void bitonicSort(int a[], int low, int cnt, int dir)
{
  if (cnt > 1) {
    int k = cnt / 2;

    // sort in ascending order since dir here is 1
    bitonicSort(a, low, k, 1);

    // sort in descending order since dir here is 0
    bitonicSort(a, low + k, k, 0);

    // Will merge whole sequence in ascending order
    // since dir=1.
    bitonicMerge(a, low, cnt, dir);
  }
}

//*************************************************************************************************************

// Java program to implement
// dual pivot QuickSort


public static void dpqsSwap(int[] arr, int i, int j)
{
  int temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
  snap(arr, i, j);
}

public static void dualPivotQuickSort(int[] arr, int low, int high)
{
  sortName = "Dual Pivot QuickSort";
  if (low < high)
  {

    // piv[] stores left pivot and right pivot.
    // piv[0] means left pivot and
    // piv[1] means right pivot
    int[] piv;
    piv = dpqsPartition(arr, low, high);

    dualPivotQuickSort(arr, low, piv[0] - 1);
    //      snap(arr, low, piv[0] -1);
    dualPivotQuickSort(arr, piv[0] + 1, piv[1] - 1);
    //     snap(arr, piv[0] + 1, piv[1] -1);
    dualPivotQuickSort(arr, piv[1] + 1, high);
    //      snap(arr,piv[1] + 1, high);
  }
}

public static int[] dpqsPartition(int[] arr, int low, int high)
{
  if (arr[low] > arr[high])
    dpqsSwap(arr, low, high);

  // p is the left pivot, and q
  // is the right pivot.
  int j = low + 1;
  int g = high - 1, k = low + 1,
    p = arr[low], q = arr[high];

  while (k <= g)
  {

    // If elements are less than the left pivot
    if (arr[k] < p)
    {
      dpqsSwap(arr, k, j);
      j++;
    }

    // If elements are greater than or equal
    // to the right pivot
    else if (arr[k] >= q)
    {
      while (arr[g] > q && k < g)
        g--;

      dpqsSwap(arr, k, g);
      g--;

      if (arr[k] < p)
      {
        dpqsSwap(arr, k, j);
        j++;
      }
    }
    k++;
  }
  j--;
  g++;

  // Bring pivots to their appropriate positions.
  dpqsSwap(arr, low, j);
  dpqsSwap(arr, high, g);

  // Returning the indices of the pivots
  // because we cannot return two elements
  // from a function, we do that using an array.
  return new int[] { j, g };
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SortingVisualizer_interactive_v099_3" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
